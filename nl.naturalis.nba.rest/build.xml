<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="."
         name="nl.naturalis.nba.rest"
         xmlns:naturalis="antlib:nl.naturalis.ant.contrib">

	<import file="../nl.naturalis.nba.build/common.xml" />
	<import file="../nl.naturalis.nba.build/modules.xml" />

	<!-- Project dependencies and (possibly) -->
	<path id="non-ivy-dependencies">
		<filelist dir="${api.module.location}/build" files="${api.module.artifact}" />
		<filelist dir="${utils.module.location}/build" files="${utils.module.artifact}" />
		<filelist dir="${common.module.location}/build"
		          files="${common.module.artifact}" />
		<filelist dir="${dao.module.location}/build" files="${dao.module.artifact}" />
	</path>
	
	<property name="junit.suite.classname" value="nl.naturalis.nba.rest.AllTests" />

	<!-- Creates version.properties which is used by a REST service -->
	<target name="create-version-file" depends="git-info">
		<naturalis:getBuildNumber />
		<propertyfile file="${rest.module.location}/src/main/resources/version.properties"
		              comment="Generated by Ant build">
			<entry key="git.branch" value="${git.branch}" />
			<entry key="git.tag" value="${git.tag}" />
			<entry key="git.commit" value="${git.commit}" />
			<entry key="build.date" type="date" value="now" />
			<entry key="build.number" type="int" value="${build.number}" />
		</propertyfile>
	</target>

	<target name="create-war-file" depends="create-version-file,run-tests">
		<property name="assembly.dir" location="${basedir}/build/assemble" />
		<delete dir="${assembly.dir}" quiet="true" />
		<mkdir dir="${assembly.dir}" />
		<property name="war.lib.dir" location="${assembly.dir}/WEB-INF/lib" />
		<echo message="Collecting files for war file" />
		<mkdir dir="${assembly.dir}" />
		<copy todir="${assembly.dir}">
			<fileset dir="WebContent" includes="**/*" excludes="**/.git*" />
		</copy>
		<copy todir="${assembly.dir}/WEB-INF/classes">
			<fileset dir="build/main" excludes="**/.git*" />
		</copy>
		<!-- Project jars to lib dir -->
		<copy todir="${war.lib.dir}"
		      file="${api.module.location}/build/${api.module.artifact}" />
		<copy todir="${war.lib.dir}"
		      file="${utils.module.location}/build/${utils.module.artifact}" />
		<copy todir="${war.lib.dir}"
		      file="${common.module.location}/build/${common.module.artifact}" />
		<copy todir="${war.lib.dir}"
		      file="${dao.module.location}/build/${dao.module.artifact}" />
		<!-- Copy project dependencies to lib dir -->
		<copy todir="${war.lib.dir}">
			<fileset dir="${api.module.location}/build/classpath" />
			<fileset dir="${utils.module.location}/build/classpath" />
			<fileset dir="${common.module.location}/build/classpath" />
			<fileset dir="${dao.module.location}/build/classpath" />
			<fileset dir="${rest.module.location}/build/classpath" />
		</copy>
		<jar destfile="build/${rest.module.artifact}" basedir="${assembly.dir}" />
	</target>

	<target name="build" depends="build-dao-module,clean,create-war-file" />

	<target name="install" depends="build">
		<!-- Delete current installation -->
		<delete file="${war.install.path}" quiet="true" failonerror="false" />
		<delete dir="${war.install.path}" quiet="true" failonerror="false" />
		<!-- Copy war file to Wildfly deployments dir -->
		<copy file="build/${rest.module.artifact}"
		      tofile="${war.install.path}"
		      overwrite="true" />
		<property name="proto.conf.dir" value="${build.module.location}/proto.conf.dir" />
		<!-- Copy nba.properties to configuration dir -->
		<copy file="${build.module.location}/nba.properties.template"
		      tofile="${nl.naturalis.nba.conf.dir}/nba.properties"
		      overwrite="true">
			<filterset begintoken="@"
			           endtoken="@"
			           filtersfile="${build.module.location}/${build.properties.file}" />
		</copy>
		<!-- Copy DwCA configuration to conf dir, but only if not present yet -->
		<!-- copy todir="${nl.naturalis.nba.conf.dir}/dwca" overwrite="false">
			<fileset dir="${proto.conf.dir}/dwca" />
		</copy -->
		<!-- This now really is the responsibility of the application maintainers -->
	</target>


</project>
