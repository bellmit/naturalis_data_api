package nl.naturalis.nba.dao.es.util;

import java.io.InputStream;
import java.util.Base64;
import java.util.HashSet;
import java.util.Set;

import org.apache.commons.compress.utils.Charsets;
import org.apache.logging.log4j.Logger;
import org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;
import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;
import org.elasticsearch.action.admin.indices.delete.DeleteIndexRequestBuilder;
import org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;
import org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestBuilder;
import org.elasticsearch.action.admin.indices.mapping.put.PutMappingResponse;
import org.elasticsearch.action.admin.indices.refresh.RefreshRequestBuilder;
import org.elasticsearch.action.admin.indices.settings.get.GetSettingsRequest;
import org.elasticsearch.action.admin.indices.settings.get.GetSettingsResponse;
import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;
import org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsResponse;
import org.elasticsearch.client.IndicesAdminClient;
import org.elasticsearch.common.settings.Settings;
import org.elasticsearch.common.settings.Settings.Builder;
import org.elasticsearch.index.IndexNotFoundException;

import nl.naturalis.nba.api.model.SourceSystem;
import nl.naturalis.nba.dao.es.DAORegistry;
import nl.naturalis.nba.dao.es.DocumentType;
import nl.naturalis.nba.dao.es.ESClientManager;
import nl.naturalis.nba.dao.es.IndexInfo;
import nl.naturalis.nba.dao.es.exception.DaoException;
import nl.naturalis.nba.dao.es.map.MappingSerializer;
import nl.naturalis.nba.dao.es.types.ESType;

public class ESUtil {

	private static final Logger logger = DAORegistry.getInstance().getLogger(ESUtil.class);

	private ESUtil()
	{
	}

	public static String base64Encode(String s)
	{
		byte[] bytes = s.getBytes(Charsets.UTF_8);
		bytes = Base64.getEncoder().encode(bytes);
		return new String(bytes, Charsets.UTF_8);
	}

	/**
	 * Generates the value of the Elasticsearch _id field based on the source
	 * system of the record and the id the record had in the source system.
	 * Values for the _id field are never auto-generated by Elasticsearch.
	 * Instead, the value is generated as follows:
	 * {@code sourceSystemId + '@' + sourceSystem.getCode()}.
	 * 
	 * @param sourceSystem
	 * @param sourceSystemId
	 * @return
	 */
	public static String getElasticsearchId(SourceSystem sourceSystem, String sourceSystemId)
	{
		return sourceSystemId + '@' + sourceSystem.getCode();
	}

	/**
	 * Generates the value of the Elasticsearch _id field based on the source
	 * system of the record and the id the record had in the source system.
	 * 
	 * @param sourceSystem
	 * @param sourceSystemId
	 * @return
	 */
	public static String getElasticsearchId(SourceSystem sourceSystem, int sourceSystemId)
	{
		return sourceSystemId + '@' + sourceSystem.getCode();
	}

	/**
	 * Returns the indices for all public static final {@link DocumentType}
	 * instances defined in the {@link DocumentType} class. Document types may
	 * share an index, but this method only returns unique indices.
	 * 
	 * @return
	 */
	public static Set<IndexInfo> getDistinctIndices()
	{
		Set<IndexInfo> result = new HashSet<>(3);
		result.add(DocumentType.SPECIMEN.getIndexInfo());
		result.add(DocumentType.TAXON.getIndexInfo());
		result.add(DocumentType.MULTI_MEDIA_OBJECT.getIndexInfo());
		return result;
	}

	public static Set<IndexInfo> getDistinctIndices(DocumentType... documentTypes)
	{
		Set<IndexInfo> result = new HashSet<>(3);
		for (DocumentType dt : documentTypes) {
			result.add(dt.getIndexInfo());
		}
		return result;
	}

	/**
	 * Deletes all indices used by the NBA. All data will be lost. WATCH OUT!
	 */
	public static void deleteAllIndices()
	{
		for (IndexInfo index : getDistinctIndices()) {
			deleteIndex(index);
		}
	}

	/**
	 * Creates all Elasticsearch indices for all public static final
	 * {@link DocumentType} instances defined in the {@link DocumentType} class.
	 */
	public static void createAllIndices()
	{
		for (IndexInfo index : getDistinctIndices()) {
			createIndex(index);
		}
	}

	public static void deleteIndex(DocumentType documentType)
	{
		deleteIndex(documentType.getIndexInfo());
	}

	public static void deleteIndex(IndexInfo indexInfo)
	{
		String index = indexInfo.getName();
		logger.info("Deleting index {}", index);
		DeleteIndexRequestBuilder request = indices().prepareDelete(index);
		try {
			DeleteIndexResponse response = request.execute().actionGet();
			if (!response.isAcknowledged()) {
				throw new RuntimeException("Failed to delete index " + index);
			}
			logger.info("Index deleted");
		}
		catch (IndexNotFoundException e) {
			logger.info("No such index \"{}\" (nothing deleted)", index);
		}
	}

	public static void createIndex(DocumentType documentType)
	{
		createIndex(documentType.getIndexInfo());
	}

	public static void createIndex(IndexInfo indexInfo)
	{
		String index = indexInfo.getName();
		logger.info("Creating index {}", index);
		// First load non-user-configurable settings
		String resource = "/es-settings.json";
		InputStream is = ESUtil.class.getResourceAsStream(resource);
		Builder builder = Settings.settingsBuilder();
		builder.loadFromStream(resource, is);
		// Then add user-configurable settings
		builder.put("index.number_of_shards", indexInfo.getNumShards());
		builder.put("index.number_of_replicas", indexInfo.getNumReplicas());
		CreateIndexRequestBuilder request = indices().prepareCreate(index);
		request.setSettings(builder.build());
		CreateIndexResponse response = request.execute().actionGet();
		if (!response.isAcknowledged()) {
			throw new DaoException("Failed to create index " + index);
		}
		logger.info("Created index {}", index);
		for (DocumentType dt : indexInfo.getTypes()) {
			createType(dt);
		}
	}

	public static void refreshIndex(DocumentType documentType)
	{
		refreshIndex(documentType.getIndexInfo());
	}

	public static void refreshIndex(Class<? extends ESType> cls)
	{
		IndexInfo indexInfo = DocumentType.forClass(cls).getIndexInfo();
		refreshIndex(indexInfo);
	}

	public static void refreshIndex(IndexInfo indexInfo)
	{
		String index = indexInfo.getName();
		RefreshRequestBuilder request = indices().prepareRefresh(index);
		request.execute().actionGet();
	}

	public static String getAutoRefreshInterval(IndexInfo indexInfo)
	{
		String index = indexInfo.getName();
		GetSettingsRequest request = new GetSettingsRequest();
		GetSettingsResponse response = indices().getSettings(request).actionGet();
		try {
			return response.getSetting(index, "index.refresh_interval");
		}
		/*
		 * Hack to work around a bug in Elasticsearch (2.3.3). You get a nasty
		 * NullPointerException if the index does not exist, or if no settings
		 * have been explicitly set for it.
		 */
		catch (NullPointerException e) {
			return null;
		}
	}

	public static String disableAutoRefresh(IndexInfo indexInfo)
	{
		String index = indexInfo.getName();
		logger.info("Disabling auto-refresh for index " + index);
		String origValue = getAutoRefreshInterval(indexInfo);
		UpdateSettingsRequest request = new UpdateSettingsRequest(index);
		Builder builder = Settings.settingsBuilder();
		builder.put("index.refresh_interval", -1);
		request.settings(builder.build());
		UpdateSettingsResponse response = indices().updateSettings(request).actionGet();
		if (!response.isAcknowledged()) {
			String msg = "Failed to disable auto-refresh for index " + index;
			throw new DaoException(msg);
		}
		return origValue;
	}

	public static void setAutoRefreshInterval(IndexInfo indexInfo, String interval)
	{
		if (interval == null) {
			logger.warn("Setting the index refresh interval to null has no effect");
			return;
		}
		String index = indexInfo.getName();
		logger.info("Enabling auto-refresh for index " + index);
		UpdateSettingsRequest request = new UpdateSettingsRequest(index);
		Builder builder = Settings.settingsBuilder();
		builder.put("index.refresh_interval", interval);
		request.settings(builder.build());
		UpdateSettingsResponse response = indices().updateSettings(request).actionGet();
		if (!response.isAcknowledged()) {
			String msg = "Failed to enable auto-refresh for index " + index;
			throw new DaoException(msg);
		}
	}

	public static void createType(DocumentType dt)
	{
		String index = dt.getIndexInfo().getName();
		String type = dt.getName();
		logger.info("Creating type {}", type);
		PutMappingRequestBuilder request = indices().preparePutMapping(index);
		MappingSerializer serializer = new MappingSerializer();
		String source = serializer.serialize(dt.getMapping());
		request.setSource(source);
		request.setType(type);
		PutMappingResponse response = request.execute().actionGet();
		if (!response.isAcknowledged()) {
			throw new DaoException("Failed to create type " + type);
		}
		logger.info("Created type {}", type);
	}

	private static IndicesAdminClient indices()
	{
		return ESClientManager.getInstance().getClient().admin().indices();
	}

}
