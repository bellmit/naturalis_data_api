<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:if="ant:if" xmlns:unless="ant:unless" basedir="." name="nl.naturalis.nda.build" default="help">

	<tstamp>
		<format property="now" pattern="yyyy_MM_dd___HH_mm_ss" locale="en" />
	</tstamp>

	<property file="build.properties" />

	<target name="-verify">
		<echo message="Verifying build environment" />
		<!-- Do we have a Git command line client? -->
		<exec executable="git" outputproperty="git.available" failifexecutionfails="false">
			<arg value="branch" />
		</exec>
		<fail unless:set="git.available" message="Git not installed, or Git bin directory not added to PATH yet" />
		<!-- Do we have build.properties? -->
		<fail message="Copy build.properties.tpl to build.properties and make sure it contains the correct settings">
			<condition>
				<not>
					<resourcecount count="1">
						<fileset dir="${basedir}" includes="build.properties" />
					</resourcecount>
				</not>
			</condition>
		</fail>
		<!-- We're good to go -->
		<property name="signal.clear" value="on" />
		<echo message="You got clearance!" />
	</target>

	<target name="verify" description="Verify preconditions for doing NBA builds with Ant">
		<antcall target="-verify" unless:set="signal.clear" />
	</target>

	<target name="-git-get-info" depends="verify">
		<exec executable="git" outputproperty="git.commit" failifexecutionfails="true">
			<arg value="log" />
			<arg value='--pretty=format:"%H"' />
			<arg value="-n" />
			<arg value="1" />
		</exec>
		<exec executable="git" outputproperty="git.tag" failifexecutionfails="true">
			<arg value="describe" />
			<arg value="--abbrev=0" />
		</exec>
		<exec executable="git" outputproperty="git.branch" failifexecutionfails="true">
			<arg value="rev-parse" />
			<arg value="--abbrev-ref" />
			<arg value="HEAD" />
		</exec>
		<exec executable="git" outputproperty="git.status" failifexecutionfails="true">
			<arg value="status" />
			<arg value="-s" />
		</exec>
		<echo message="" />
		<echo message="" />
		<echo message="****************************************************************" />
		<echo message="You are on branch: ${git.branch} (${git.tag})" />
		<echo message="****************************************************************" />
		<echo message="" />
		<echo message="Last commit: ${git.commit}" />
		<condition property="git.show.status">
			<not>
				<equals arg1="${git.status}" arg2="" trim="true" />
			</not>
		</condition>
		<echo if:true="${git.show.status}" message=" " />
		<echo if:true="${git.show.status}" message="There are uncommitted changes in branch ${git.branch}:" />
		<echo if:true="${git.show.status}" message="${git.status}" />
		<echo message="" />
		<!-- Allow some time for a heart attack -->
		<echo message="You got 3 seconds before the build continues ..." />
		<sleep seconds="3" />
		<property name="git.got.info" value="true" />
	</target>

	<target name="git-info" description="Show information about the Git branch you will be doing your build on">
		<antcall target="-git-get-info" unless:set="git.got.info" />
	</target>

	<target name="clean" description="Force a clean build of the subsequently specified module">
		<property name="signal.clean" value="on" />
	</target>

	<target name="nightly" description="Make a night build (use in combination with build target)">
		<fail message="Cannot make nightly build and release build at the same time" if:set="signal.release" />
		<property name="signal.nightly" value="on" />
	</target>

	<target name="release" description="Make a release build (use in combination with build target)">
		<fail message="Cannot make nightly build and release build at the same time" if:set="signal.nightly" />
		<property name="signal.release" value="on" />
	</target>

	<target name="build-domain-module" depends="git-info" description="Compile and create jar file for domain module">
		<ant antfile="../nl.naturalis.nda.domain/build.xml" useNativeBasedir="true" inheritrefs="true" target="clean" if:set="signal.clean" />
		<ant antfile="../nl.naturalis.nda.domain/build.xml" useNativeBasedir="true" inheritrefs="true" />
	</target>

	<target name="build-dao-module" depends="build-domain-module" description="Compile and create jar file for dao module">
		<ant antfile="../nl.naturalis.nda.elasticsearch.dao/build.xml" useNativeBasedir="true" inheritrefs="true" target="clean" if:set="signal.clean" />
		<ant antfile="../nl.naturalis.nda.elasticsearch.dao/build.xml" useNativeBasedir="true" inheritrefs="true" />
	</target>

	<target name="build-ejb-module" depends="build-dao-module" description="Compile and create jar file for ejb module">
		<ant antfile="../nl.naturalis.nda.ejb/build.xml" useNativeBasedir="true" inheritrefs="true" target="clean" if:set="signal.clean" />
		<ant antfile="../nl.naturalis.nda.ejb/build.xml" useNativeBasedir="true" inheritrefs="true" />
	</target>

	<target name="build-rest-module" depends="build-ejb-module" description="Compile and create war file for rest module">
		<ant antfile="../nl.naturalis.nda.service.rest/build.xml" useNativeBasedir="true" inheritrefs="true" target="clean" if:set="signal.clean" />
		<ant antfile="../nl.naturalis.nda.service.rest/build.xml" useNativeBasedir="true" inheritrefs="true" />
	</target>

	<target name="build-ear-file" depends="build-rest-module" description="Create the NBA ear file">
		<ant antfile="../nl.naturalis.nda.ear/build.xml" useNativeBasedir="true" inheritrefs="true" target="clean" if:set="signal.clean" />
		<ant antfile="../nl.naturalis.nda.ear/build.xml" useNativeBasedir="true" inheritall="true" inheritrefs="true" />
	</target>

	<target name="clean-import-module" description="Perform cleanup for import module, without subsequently building/installing it">
		<ant antfile="../nl.naturalis.nda.load/build.xml" useNativeBasedir="true" target="clean" />
		<ant antfile="../nl.naturalis.nda.sh/build.xml" useNativeBasedir="true" target="clean-import" />
	</target>
	
	<target name="build-import-module" depends="build-dao-module" description="Compile and create jar file for import module">
		<ant antfile="../nl.naturalis.nda.elasticsearch.load/build.xml" useNativeBasedir="true" inheritrefs="true" target="clean" if:set="signal.clean" />
		<ant antfile="../nl.naturalis.nda.elasticsearch.load/build.xml" useNativeBasedir="true" inheritrefs="true" />
	</target>

	<target name="install-import-module" depends="build-import-module" description="Install the shell scripts for the import module">
		<ant antfile="../nl.naturalis.nda.sh/build.xml" useNativeBasedir="true" inheritrefs="true" target="clean-import" if:set="signal.clean" />
		<ant antfile="../nl.naturalis.nda.sh/build.xml" useNativeBasedir="true" inheritrefs="true" target="install-import" />
	</target>

	<target name="patch-import-module" depends="verify" description="Re-install import shell scripts and config files. Especially useful when build.properties has changed">
		<ant antfile="../nl.naturalis.nda.sh/build.xml" useNativeBasedir="true" target="update-import" />
	</target>


	<target name="test-import-module" depends="install-import-module" description="Test installation of the import module">
		<echo message="Coming soon" />
	</target>

	<target name="clean-export-module" description="Perform cleanup for export module, without subsequently building/installing it">
		<ant antfile="../nl.naturalis.nda.export/build.xml" useNativeBasedir="true" target="clean" />
		<ant antfile="../nl.naturalis.nda.sh/build.xml" useNativeBasedir="true" target="clean-export" />
	</target>

	<target name="build-export-module" depends="build-dao-module" description="Compile and create jar file for export module">
		<ant antfile="../nl.naturalis.nda.export/build.xml" useNativeBasedir="true" target="clean" />
		<ant antfile="../nl.naturalis.nda.export/build.xml" useNativeBasedir="true" />
	</target>

	<target name="install-export-module" depends="build-export-module" description="Install the export programs on the server">
		<ant antfile="../nl.naturalis.nda.sh/build.xml" useNativeBasedir="true" target="clean-export" if:set="signal.clean" />
		<ant antfile="../nl.naturalis.nda.sh/build.xml" useNativeBasedir="true" target="install-export" />
	</target>

	<target name="test-export-module" depends="install-export-module" description="Run the DwCA export program from a vanilla installation">
		<ant antfile="../nl.naturalis.nda.sh/build.xml" useNativeBasedir="true" target="test-export" />
	</target>

	<target name="patch-export-module" depends="verify" description="Re-install export shell scripts and config files. Especially useful when build.properties has changed">
		<ant antfile="../nl.naturalis.nda.sh/build.xml" useNativeBasedir="true" inheritrefs="true" target="patch-import" />
	</target>

	<target name="build" depends="build-ear-file" description="Create the NBA ear file" />

	<target name="rebuild" depends="clean,build" description="Rebuild the NBA ear file from scratch" />

	<target name="eclipse" depends="git-info" description="Create/adjust Eclipse metadata files">
		<ant antfile="../nl.naturalis.nda.ear/build.xml" useNativeBasedir="true" inheritrefs="true" target="eclipse" />
	</target>

	<target name="host0" description="Remote deployment to ear.install.scp.host0 (see build.properties)">
		<property name="deploy.to.host0" value="true" />
	</target>

	<target name="host1" description="Remote deployment to ear.install.scp.host1 (see build.properties)">
		<property name="deploy.to.host1" value="true" />
	</target>

	<target name="host2" description="Remote deployment to ear.install.scp.host2 (see build.properties)">
		<property name="deploy.to.host2" value="true" />
	</target>

	<target name="host3" description="Remote deployment to ear.install.scp.host3 (see build.properties)">
		<property name="deploy.to.host3" value="true" />
	</target>

	<target name="deploy-ear-file" depends="build-ear-file" description="Deploy the NBA ear file (remote if preceded by host0, host1, ...; otherwise local)">
		<ant antfile="../nl.naturalis.nda.ear/build.xml" useNativeBasedir="true" inheritAll="true" inheritrefs="true" target="deploy" />
	</target>

	<target name="help" description="Show help text">
		<echo message="Show all build targets ...............................: ant -p" />
		<echo message="More help is on the way" />
	</target>


</project>