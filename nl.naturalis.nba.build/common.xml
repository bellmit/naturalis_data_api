<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant"
         xmlns:naturalis="antlib:nl.naturalis.ant.contrib"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless"
         basedir="."
         name="common">

	<!-- Make sure we don't loose ourselves when we are imported -->
	<dirname property="common.base.dir" file="${ant.file.common}" />

	<!-- Load build settings -->
	<import file="${common.base.dir}/properties.xml" />

	<!-- Configure Ivy ant tasks -->
	<taskdef uri="antlib:org.apache.ivy.ant"
	         classpath="${build.module.location}/antlib/ivy-2.4.0.jar"
	         resource="org/apache/ivy/ant/antlib.xml" />

	<!-- Configure naturalis ant tasks -->
	<taskdef uri="antlib:nl.naturalis.ant.contrib"
	         classpath="${build.module.location}/antlib/nl.naturalis.ant.contrib.jar"
	         resource="nl/naturalis/ant/contrib/antlib.xml" />

	<!-- Get info about git branch -->
	<target name="git-info" description="Retrieve current git branch, tag and commit">
		<exec executable="git" outputproperty="git.commit">
			<arg value="rev-parse" />
			<arg value="--verify" />
			<arg value="HEAD" />
		</exec>
		<exec executable="git" outputproperty="git.tag">
			<arg value="describe" />
			<arg value="--tags" />
			<arg value="--abbrev=0" />
		</exec>
		<exec executable="git" outputproperty="git.branch">
			<arg value="rev-parse" />
			<arg value="--abbrev-ref" />
			<arg value="HEAD" />
		</exec>
		<exec executable="git" outputproperty="git.status">
			<arg value="status" />
			<arg value="-s" />
		</exec>
	</target>

	<target name="clean">
		<echo level="info">==== ${ant.project.name} (clean-up) ====</echo>
		<delete dir="build" quiet="true" failonerror="false" />
	</target>

	<target name="-init">
		<mkdir dir="build" />
		<mkdir dir="build/main" />
		<mkdir dir="build/test" />
		<mkdir dir="build/classpath" />
		<mkdir dir="build/test-classpath" />
	</target>

	<!--
		Copy resources like property files to the output directory
		Also copy the Java source files to the output directory,
		because we want them in our jar/war files.
	-->
	<target name="-copy-resources" depends="-init">
		<copy includeemptydirs="false" todir="build/main">
			<fileset dir="src/main/java" />
			<fileset dir="src/main/resources" />
		</copy>
	</target>

	<!-- Copy resources for unit testing to output directory -->
	<target name="-copy-test-resources" depends="-init">
		<copy includeemptydirs="false" todir="build/test">
			<fileset dir="src/test/java">
				<exclude name="**/*.java" />
			</fileset>
			<fileset dir="src/test/resources">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="resolve">
		<echo message="Resolving dependencies for ${ant.project.name}" />
		<ivy:resolve />
	</target>

	<target name="-build-classpath">
		<mkdir dir="build/classpath" />
		<!-- Copy Ivy-managed dependencies to classpath -->
		<ivy:retrieve pattern="build/classpath/[artifact]-[revision](-[classifier]).[ext]"
		              log="download-only" />
		<!-- Copy non-Ivy-managed dependencies to classpath -->
		<copy todir="build/classpath">
			<path refid="non-ivy-dependencies" />
		</copy>
		<!-- If the project has a lib dir, copy its contents to classpath -->
		<available file="lib" type="dir" property="lib.dir.exists" />
		<copy if:set="lib.dir.exists" todir="build/classpath">
			<fileset dir="lib" />
		</copy>
	</target>

	<target name="compile" depends="-copy-resources,-build-classpath">
		<echo level="info">==== ${ant.project.name} (compile) ====</echo>
		<javac encoding="UTF8"
		       destdir="build/main"
		       debug="true"
		       debuglevel="${javac.debug}"
		       includeantruntime="false"
		       source="${javac.source}"
		       target="${javac.target}">
			<src path="src/main/java" />
			<classpath>
				<fileset dir="build/classpath">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>

	<target name="compile-tests" depends="-copy-test-resources,compile">
		<copy todir="build/test-classpath">
			<fileset dir="${build.module.location}/lib">
				<include name="**/junit*.jar" />
				<include name="**/hamcrest-core*.jar" />
			</fileset>
		</copy>
		<javac encoding="UTF8"
		       destdir="build/test"
		       debug="true"
		       debuglevel="${javac.debug}"
		       includeantruntime="false"
		       source="${javac.source}"
		       target="${javac.target}">
			<src path="src/test/java" />
			<classpath>
				<fileset dir="build/classpath" />
				<fileset dir="build/test-classpath" />
				<!-- Required to include "main" Java classes in classpath -->
				<dirset dir="build/main" />
			</classpath>
		</javac>
	</target>

	<!--
		This is a work-around for regular unit testing using
		the junit task. If a module needs to go through a test
		phase, it must define a property "junit.suite.classname".
		The property must point to a junit suite class that
		lists all individual test classes in the module
	-->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
	
	<target name="run-tests" depends="compile-tests">

		<!-- 
		  The workaround has been extended with the possibility
		  to skip running the unit tests. To do so, you need to 
		  set an evironment variable SKIP_TEST:
		  
    		  export SKIP_TESTS=true
		  
		--> 
        <property environment="my_env" />
        <echo level="warning">SKIP_TESTS: ${my_env.SKIP_TESTS}</echo>
		
		<condition property="runTest" value="true" >
			<and>
        		<isfalse value="${my_env.SKIP_TESTS}" />
    			<isset property="junit.suite.classname" />
			</and>
		</condition>
		<antcall if:true="${runTest}" target="-do-run-tests" />
		
	</target>

	<target name="-do-run-tests">
		<echo level="info">==== ${ant.project.name} (test) ====</echo>
		<tstamp>
			<format property="test.datetime" pattern="yyyyMMddHHmmss" />
		</tstamp>
		<property name="proto.conf.dir"
		          location="${build.module.location}/proto.conf.dir" />
		<!-- Create nba.properties file in the proto configuration directory -->
		<copy file="${build.module.location}/nba-test.properties.template"
		      tofile="${proto.conf.dir}/nba.properties"
		      overwrite="true">
			<filterset begintoken="@"
			           endtoken="@"
			           filtersfile="${build.module.location}/${build.properties.file}" />
		</copy>
		<java classname="org.junit.runner.JUnitCore"
		      fork="true"
		      resultproperty="junit.result">
			<arg value="${junit.suite.classname}" />
			<sysproperty key="log4j.configurationFile"
			             value="${build.module.location}/log4j2.xml" />
			<sysproperty key="nl.naturalis.nba.logFileBaseName"
			             value="${build.module.location}/log/test.${test.datetime}" />
			<sysproperty key="nba.v2.conf.dir" value="${proto.conf.dir}" />
			<sysproperty key="file.encoding" value="UTF-8" />
			<classpath>
				<fileset dir="build/classpath">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="build/test-classpath">
					<include name="**/*.jar" />
				</fileset>
				<dirset dir="build/main" />
				<dirset dir="build/test" />
			</classpath>
		</java>
		<condition property="junit.ok">
			<equals arg1="${junit.result}" arg2="0" />
		</condition>
		<fail unless:set="junit.ok"
		      message="At least one test failed! See ${build.module.location}/log/test.${test.datetime}.log" />
	</target>

	<!--
		Regular testing using junit task no longer works
		because of a mysterious ClassNotFoundException
		(org.elasticsearch.Version).
	-->
	<target name="test" depends="compile-tests">
		<echo level="info">==== ${ant.project.name} (test) ====</echo>
		<mkdir dir="${build.module.location}/log/test-reports" />
		<junit printsummary="yes" haltonfailure="yes">
			<sysproperty key="nba.v2.conf.dir" value="${nba.v2.conf.dir.test}" />
			<assertions>
				<enable />
			</assertions>
			<classpath>
				<fileset dir="build/classpath">
					<include name="**/*.jar" />
				</fileset>
				<fileset dir="build/test-classpath">
					<include name="**/*.jar" />
				</fileset>
				<dirset dir="build/main" />
				<dirset dir="build/test" />
			</classpath>
			<formatter type="plain" />
			<batchtest todir="${build.module.location}/log/test-reports">
				<fileset dir="src/test/java">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="package" depends="run-tests">
		<echo level="info">==== ${ant.project.name} (package) ====</echo>
		<jar destfile="build/${ant.project.name}.jar"
		     basedir="build/main"
		     excludes="**/.git*" />
	</target>

</project>