package nl.naturalis.nba.etl;

import static nl.naturalis.nba.dao.DocumentType.SPECIMEN;
import static nl.naturalis.nba.etl.ETLUtil.logDuration;

import org.apache.logging.log4j.Logger;

import nl.naturalis.nba.api.QueryCondition;
import nl.naturalis.nba.api.QuerySpec;
import nl.naturalis.nba.api.model.Specimen;
import nl.naturalis.nba.dao.DocumentType;
import nl.naturalis.nba.dao.util.es.DirtyDocumentIterator;

/**
 * Checks if each document has an elasticsearch id containing an @ . If this is
 * true, a document has an id generated by nba; if not, the id will have been
 * generated by elasticsearch, which is unwanted and hence false.
 *  
 * @author Tom Gilissen
 *
 */
public class DocumentIDChecker {

	private static final Logger logger = ETLRegistry.getInstance()
			.getLogger(DocumentIDChecker.class);
	private static DocumentType dt;

	public static void main(String[] args) throws Exception {
	
		try {
			DocumentIDChecker checker = new DocumentIDChecker();
			checker.CheckIDs();
		}
		finally {}
	}

	
	public DocumentIDChecker(){}
	
	
	public void CheckIDs() throws Exception
	{		
		long start = System.currentTimeMillis();
		int batchSize = 1000;
		
		DocumentType<Specimen> dt = SPECIMEN;
		QuerySpec qs = new QuerySpec();
		qs.setConstantScore(true);
		qs.setSize(batchSize);
		qs.addCondition(new QueryCondition("unitID", "NOT_EQUALS", null));
		// qs.addCondition(new QueryCondition()); // empty query

		DirtyDocumentIterator<Specimen> iterator = new DirtyDocumentIterator<>(dt, qs);
		int processed = 0;
		int errors = 0;
		logger.info("Processing specimens");
		for (Specimen specimen : iterator) {
			processed++;
			if(!specimen.getId().contains("@")) {
				errors++;
				logger.error("Found document with incorrect id: {}", specimen.getId());
			}
			if (processed % 100000 == 0) {
				logger.info("Specimens processed: {}", processed);
				logger.info("Specimens with incorrect ID: {}", errors);
			}
		}
		logger.info("-----------------------------");
		logger.info("Specimens processed: {}", processed);
		logger.info("Check finished with {} errors", errors);
		logDuration(logger, getClass(), start);
	}

}
