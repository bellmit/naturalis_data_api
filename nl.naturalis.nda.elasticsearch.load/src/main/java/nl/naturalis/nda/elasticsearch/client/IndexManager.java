package nl.naturalis.nda.elasticsearch.client;

import java.util.Collection;
import java.util.List;

/**
 * Interface defining some common, basic methods for interacting with a single
 * ElasticSearch index.
 * 
 * @author ayco_holleman
 * 
 */
public interface IndexManager {

	/**
	 * Whether the index managed by this instance actually exists.
	 * 
	 * @return {@code true} if yes, {@code false} if not.
	 */
	boolean exists();

	/**
	 * Whether the index contains a definition ("mapping") of the specified
	 * document type.
	 * 
	 * @param type
	 *            The document type to verify
	 * 
	 * @return @return {@code true} if yes, {@code false} if not.
	 */
	boolean typeExists(String type);

	/**
	 * Describes the index (i.e. its mapping).
	 * 
	 * @return The mapping or null the index has not been created yet.
	 */
	String describe();

	/**
	 * Describes all indices (i.e. their mappings) in the cluster. This method
	 * does <i>not</i> specifically operate against the encapsulated index. For
	 * ease of use, though, it's still a non-static method.
	 * 
	 * @return The mappings
	 */
	String describeAllIndices();

	/**
	 * Creates the index with one shard and zero replicas.
	 */
	void create();

	/**
	 * Creates the index with the specified number of shards and replicas
	 * 
	 * @param numShards
	 *            The number of shards
	 * @param numReplicas
	 *            The number of replicas
	 */
	void create(int numShards, int numReplicas);

	/**
	 * Creates the index using the specified settings.
	 * 
	 * @param settings
	 *            A JSON string containing the settings for the index.
	 */
	void create(String settings);

	/**
	 * Deletes the index and everything in it (!)
	 * 
	 * @return {@code true} if the index existed and was successfully deleted;
	 *         {@code false} if the index did not exist.
	 */
	boolean delete();

	/**
	 * Adds a new document type (a.k.a. mapping) to the index or overwrites an
	 * existing one.
	 * 
	 * @param name
	 *            The name of the type
	 * @param mapping
	 *            The mapping for the type
	 * 
	 */
	void addType(String name, String mapping);

	/**
	 * Deletes the specified type (along with all documents of that type) from
	 * the index.
	 * 
	 * @param name
	 * @return
	 */
	boolean deleteType(String name);

	/**
	 * Delete all indices and their data from the cluster. <b>Use with care!</b>
	 * This method does <i>not</i> specifically operate against the encapsulated
	 * index. For ease of use, though, it is still a non-static method.
	 * 
	 */
	void deleteAllIndices();

	/**
	 * Retrieves the object corresponding to the specified id.
	 * 
	 * @param type
	 *            The document type corresponding to type T
	 * @param id
	 *            The id of the document
	 * @param targetClass
	 *            The class of the requested object
	 * @return An object of type T
	 */
	<T> T get(String type, String id, Class<T> targetClass);

	/**
	 * Retrieves the objects corresponding to the specified collection of ids.
	 * 
	 * @param type
	 *            The document type corresponding to type T
	 * @param ids
	 *            The ids
	 * @param targetClass
	 *            The class of the requested objects
	 * @return A list of objects of type T
	 */
	<T> List<T> get(String type, Collection<String> ids, Class<T> targetClass);

	/**
	 * Deletes the document with the specified id
	 * 
	 * @param type
	 *            The type of the document
	 * @param id
	 *            The id of the document
	 * @return Whether or not the document was found
	 */
	boolean deleteDocument(String type, String id);

	/**
	 * Deletes all documents from the specified document type where the
	 * specified field has the specified value.
	 * 
	 * @param type
	 * @param field
	 * @param value
	 */
	void deleteWhere(String type, String field, String value);

	/**
	 * Adds a new document of the specified type to the index.
	 * 
	 * @param type
	 *            The type of the document
	 * @param json
	 *            The document
	 * @param id
	 *            The document ID
	 * 
	 */
	void saveDocument(String type, String json, String id);

	/**
	 * Adds the specified object to the index.
	 * 
	 * @param type
	 *            The type of the document
	 * @param obj
	 *            The object to add
	 * @param id
	 *            The document ID
	 */
	void saveObject(String type, Object obj, String id);

	/**
	 * Adds the specified object to the index.
	 * 
	 * @param type
	 *            The type of the document
	 * @param obj
	 *            The object to add
	 * @param id
	 *            The document ID. Specify {@code null} if you want the ID to be
	 *            auto-generated by ElasticSearch.
	 * @param parentId
	 *            the document ID of the parent
	 */
	void saveObject(String type, Object obj, String id, String parentId);

	/**
	 * Adds multiple objects to the index, presumably using ElasticSearch's bulk
	 * processing capabilities.
	 * 
	 * @param type
	 *            The type of the document
	 * @param objs
	 *            The objects to add
	 */
	void saveObjects(String type, List<?> objs);

	/**
	 * Adds multiple objects to the index, presumably using ElasticSearch's bulk
	 * processing capabilities.
	 * 
	 * @param type
	 *            The type of the document
	 * @param objs
	 *            The objects to add
	 * @param ids
	 *            The ids of the objects to add. For each object you must
	 *            specify an ID. In other words the sizes of the {@objs}
	 *            list and the {@ids} list must be equal. If you want Lucene to
	 *            generate the IDs for you, specify null.
	 */
	void saveObjects(String type, List<?> objs, List<String> ids);

	/**
	 * Adds multiple objects to the index, presumably using ElasticSearch's bulk
	 * processing capabilities.
	 * 
	 * @param type
	 *            The type of the document
	 * @param objs
	 *            The objects to add
	 * @param ids
	 *            The ids of the objects to add. For each object you must
	 *            specify an ID. In other words the sizes of the {@objs}
	 *            list and the {@ids} list must be equal. If you want Lucene to
	 *            generate the IDs for you, specify null.
	 * @param parentIds
	 *            The IDs of the parents of the objects. Specify null if the
	 *            objects do not have a relational parent.
	 */
	void saveObjects(String type, List<?> objs, List<String> ids, List<String> parentIds);

}